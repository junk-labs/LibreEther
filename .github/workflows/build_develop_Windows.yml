name: Build and Test(Developer) - Windows

on:
  workflow_dispatch:
    inputs:
      ref:
        required: true
        description: 'build ref'
  push:
    branches:
      - "original/develop"

jobs:
  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: win32
            arch: x86
          - platform: x64
            arch: x64
    env:
      PLATFORM: ${{ matrix.platform }}
      VCPKG_REF: a151bfd9892d096cb7ce54afdb70530c09b12e7b
    steps:
      - name: Checkout
        if: ${{ github.event.inputs.ref != '' }}
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
          ref: ${{ github.event.inputs.ref }}

      - name: Checkout
        if: ${{ github.event.inputs.ref == '' }}
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Checkout vcpkg
        uses: actions/checkout@v2
        with:
          repository: microsoft/vcpkg
          path: ${{ github.workspace }}\vcpkg
          ref: ${{env.VCPKG_REF}}

      - name: Install vcpkg and packages
        uses: lukka/run-vcpkg@v7
        id: runvcpkg
        with:
          vcpkgGitCommitId: ${{env.VCPKG_REF}}
          vcpkgTriplet: '${{ matrix.arch }}-windows-static-md'
          vcpkgArguments: 'libsodium openssl zlib'

      - name: Install CMake 3.21.2
        uses: lukka/get-cmake@v3.21.2

#      - name: Build
#        uses: lukka/run-cmake@v3
#        with:
#          buildDirectory: ${{ runner.workspace }}\build\
#          cmakeListsOrSettingsJson: CMakeListsTxtBasic
#          cmakeListsTxtPath: '${{ github.workspace }}\src\CMakeLists.txt'
#          cmakeBuildType: RelWithDebInfo
#          cmakeGenerator: Ninja
#          # This will pass to CMake the vcpkg.cmake toolchain file.
#          useVcpkgToolchainFile: true
#          buildWithCMake: true

      - name: Build
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
        run: |
          path
          mkdir ${{runner.workspace}}\build
          cd /d ${{runner.workspace}}\build
          cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="${{github.workspace}}\vcpkg\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-static-md -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl ${{github.workspace}}
          cmake --build .  --parallel 4
        shell: cmd

      - name: Make Installer Packages
        run: |
          cd /d ${{ runner.workspace }}\build\
          mkdir installers
          vpnsetup /SFXMODE:vpnclient /SFXOUT:"${{runner.workspace}}\build\installers\softether-vpnclient-${{ github.sha }}-${{ matrix.arch }}.exe"
          vpnsetup /SFXMODE:vpnserver_vpnbridge /SFXOUT:"${{runner.workspace}}\build\installers\softether-vpnserver_vpnbridge-${{ github.sha }}-${{ matrix.arch }}.exe"
        shell: cmd

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: installer-package
          path: ${{runner.workspace}}\build\installers\*.exe

      - name: Delete old release assets
        id: delete-old-release-asset
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'develop-nightly'
          assets: '*-${{ matrix.arch }}.exe'

      - name: Upload Release Asset
        id: upload-release-asset
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.delete-old-release-asset.outputs.release_id }}
          assets_path: '${{runner.workspace}}\build\installers\*.exe'
